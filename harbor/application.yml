---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "c1l6c0dTS1NFcm1EYnRjZw=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd2ZWVVArWTgvOEh4Z0RuTlNqYTFobytqd0hhb2E5eEhkQ05UR0RQRkVGR0wrV2h3CjB6T3ROd2JMckNYZmVaRDNiZCsyRzlKYmk1amdlOGhsR2RFWmRzWmVMczZoYUlpdTVqS2YvdjBoM0ljb1pXNkcKY2hNRHZicWVsMk9oME9vNlhkU3ZvRE9kTG5LTTVPWE5ENWRWVXMwTWl6cEtWTEU4SFV5SENYWUJSWWgzN0hVeApXQ05PbXg5aS9pMExKNWtPVUxmR0drelFoVmwvaHVKWjh4QnVDcFYyT3VHQUYwamxLTFJlaE00QW1WUUNzbXljClpTaWlGK3lHKzFSaDNjZkdaY2FDNWJLRUdPQ2RKNU53dDdaa0QzZVhLRVl3QldiY1hVb2hQN0JzY3NrSlhrWkoKZitid1JqSGxnbXdhYXpFUVhCVEFtMjc3ekdVSUU5aTEyREFWY1FJREFRQUJBb0lCQUFNcmJqQUpKREFOekZPTApIa2E3TkNZNXpMUkZmQ1VmR1cvVmIvTXlUV01oNGdhMlpUbWVXNU5Ob2lCekVmN2JscCtPQzF6VENEbjB5cDViClBRTzUvZytKMkZvdGVFZk1EQWVwQmlKVm9xc0c3bXNSN2xLSTZ3Tzd2QUcvV0JLZzhVazlRNDE3cW5McTNsQ1QKVE5HWGFJYU00VXFaTGtQS0RiQnc0cmdOM0tGMVBTY0FIYzVuQVNuaHFSc3I0TWJiUFNEMzRxWkdhSllkRXlGdgpReGlLcXQvNW9Ha2RkWWROY0xJNTNNaUxldjh0Qm5tSC9YQWRqT0M3N3RsS2c3eVN2RTJjdVYyR0RDNGVCd25ECm44bStKSzlUTjdldE9rZEFoVlVyeTFBZnZEam84aGRyaTA0aVM0MlIyVzc4Q0RtTDMrbTBFMnZyWGJEOFQ3d1YKTlFsdTVjRUNnWUVBOWRjSy9JNmg3NDQzc1Zra3V1eUpNaU95UlEvNTkvL2Y0aHVRU2orQmRHMWhZVGNQUURrdgplNEQ3ZWFrMmRzZ3FtOGZRZ1Y3NlVnT0gyR0thczdDeURwYXZWbUxiM0o5cmJLcndCaThKck5jbmZiclBmN2U3CmtPaWdSSlBUYlM1Ym9TKzhMQk1oWWxtTGlLcGd5NGZKZWlyNTRmdW1GcE50VDFyZVBuTk9BdmtDZ1lFQXlmbGkKWFV4TXBrN3JTRVhuR2N1cnRlRzVXRjM0U1hVUUpSRGZyYjhXcE5nZnJDU1pjaDdpTW9UdDlNWitqTVI4NkJrYgovbERDd0ZyenVKVU5rcXF6Z2JTTlFuRkthajVlTkpta1BZSTh2M2xhSU56ZFBpd0RtSDhtaFBlZnVSUGRSYXlZClNJYnIzN1Jod3JYQWNTdVJUcFYvOHZGWUtySW5tQjdSa0ZiTHpEa0NnWUVBcVIvOW9PNEhIYVM3VDdqQitnNkwKL0FCdXZmQlZ5WFV3Y243Lzd2UnRmTWxhK3VSRUM2ekxxNjE2VTZKRG84ZmsrREtva0xma2dkT0greWNxd24vRwpueDZ2RlVFQmZHLzRHVlFudURsWDhKNDd2dFZydHJPUnlBa2hhTXhCNFpUSTJNVGNNWDRmczJkakJPd2hseU9kClNmeVMyQktsbWxabUZ2ZXVlVXdkMlJFQ2dZRUFuS1M1MFRvM3lGUTB6bHpJbTQwR280MXBQa3ZESU5XVnErbW0KVVE1KzlXSlpUaDBrbFFtMnpRK2pyYyswbm1CVnIzeXA1VmVsYzZJV20vV2VEVDR1OGsyaHNRSkVnSm5XWGwwNgpzQ211QzZLR2NDNWJ1TGhTSVplYnZFeUFwLzNzQXZtVk1jclNiVEZ0RUtIOW1zZjdia01zZExNUmVpdXA0YVVsClN4akYvcUVDZ1lCU1VVenB0MTBRWnpIY2xkT2dBZkhmYTVaNWpFSWFRQUZIbmt2c3pwU3lKSWZseklUdjV0Wk8KbjFJcWpZc3JGMjJyNVhQZm9DOEpQcjlsQUFxaHN2WkErZGozRnNMS2o2a3hkUUhpemRXMVhIZ2IwS0NiTFR6RApGei9OSVVNZ21HVHpKQ1pOdE4reFhmRnhHenluMjIwNFVia0x1d3c0eHNzSmhhbENFWlNCQWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIekNDQWdlZ0F3SUJBZ0lRU1ovcFpzVmpVZWgxOGF6MGlrcy9JakFOQmdrcWhraUc5dzBCQVFzRkFEQWEKTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3SGhjTk1qVXdOVEkyTURneU1ESXlXaGNOTWpZdwpOVEkyTURneU1ESXlXakFhTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURCOVZRLzVqei93ZkdBT2MxS05yV0dqNlBBZHFocjNFZDAKSTFNWU04VVFVWXY1YUhEVE02MDNCc3VzSmQ5NWtQZHQzN1liMGx1TG1PQjd5R1VaMFJsMnhsNHV6cUZvaUs3bQpNcC8rL1NIY2h5aGxib1p5RXdPOXVwNlhZNkhRNmpwZDFLK2dNNTB1Y296azVjMFBsMVZTelF5TE9rcFVzVHdkClRJY0pkZ0ZGaUhmc2RURllJMDZiSDJMK0xRc25tUTVRdDhZYVROQ0ZXWCtHNGxuekVHNEtsWFk2NFlBWFNPVW8KdEY2RXpnQ1pWQUt5Ykp4bEtLSVg3SWI3VkdIZHg4Wmx4b0xsc29RWTRKMG5rM0MzdG1RUGQ1Y29SakFGWnR4ZApTaUUvc0d4eXlRbGVSa2wvNXZCR01lV0NiQnByTVJCY0ZNQ2JidnZNWlFnVDJMWFlNQlZ4QWdNQkFBR2pZVEJmCk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKRHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVOVFSam11aUZCUHlVUVJ5OUhVVXlZMm9ESk4wdwpEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQjA4SlVPNTIxN3dGTCtiZzRKTS91Y1pidWxSc2REUnlodHRPMXlrCmtYbGp0UWJsQ3RsTEViVmdWaElYRy9uR3VKcWduR2h0OEhSSFU3NlVuY1BrcDdIMFdwYmFxOGg2bnBzL01URFMKalhDdmZycStCZmhUZS8zNytxaXBqL2dpYnNEb0g5dlZCeTk1aHREZy9NZ1ZsdThmb1ZBd09GOHNNUGtFbXp6ago3N2F4S2ZPa1lKak80RU9kNGV1bUFnNmpLbDJiREtxNXhldGQ4YlY2RXZRbGQvVHFIRWpNVFhodEptSWprTzZQCnJaeTBRZkFtT0F0b3BXdjIzM291ZmNkWnM3ZVJJNjF3UjkzWWlYNzJUaHh4YWdPL3piYnRpKzBLUUF3WmJDbk8KQkdpb3ZjVkcyN21qQi9uVmZJNE9EUUZxei9KL212OEE4UEJHZ3Zrc3puSDZxT1U9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  HARBOR_ADMIN_PASSWORD: "Q2hhbmdlVGhpc1Bhc3N3b3Jk"
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "MmRkRUJpYndDbVU1WGFjM2dKTXg4NTlocnVNUjJpTXE="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-ingress"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURSVENDQWkyZ0F3SUJBZ0lSQVBuUUxOWDdmRmNjVnVFM0FtUDVTRlF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEkxTURVeU5qQTRNakF5TWxvWERUSTJNRFV5TmpBNApNakF5TWxvd0lURWZNQjBHQTFVRUF4TVdhR0Z5WW05eUxuUnliMk5vWVd4aGEybHpMbTVsZERDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU0wRm1HUEp5aGRROUc1S2MyaXovRHp2Y21MZkJ6YmUKWEl5Wk1HZE4rbmVwanFlWER0OVh6QUp6bUw2UWFxdUpiNlhFZ3AzVnFIUTdQeUFUdk0raWUzTnYyZWIyVUc3UgpQcDJkSmsrZnZWTjV1VFFuTU5ydFVmOXdWLzAwcHlHWnB5ZzF4TVlhSVZiMHA2REkxeVdhK1dMMHlEUlRLdTY1CnBGN3ZTMW5WTGY5UGpqSmRxby92MDQwc0RKSmVDeUhVRSt6dzZQNjk0OFFQTzAxbVhodDRxQUt0eVU1eGRqSU0KT3ZEanR5TWFJNmFVSzR1elVFT1EyaGtiSC8vazNnMHc0RnFzMUdtV3UrMDhWL1VMM1cwNmlIZ2ZRVUtOR3FiNApkVjdiMnlzbXVab2lnUHZxcm1hdWJTQjJNZUVqT21lWVMyOWxMQThpQ3RJc3NSRG40dFo0eGs4Q0F3RUFBYU9CCmhEQ0JnVEFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUYKQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVXRhcGc4RlE5cHBqUmZoOUhiOCtuY2tnUgo4UzR3SVFZRFZSMFJCQm93R0lJV2FHRnlZbTl5TG5SeWIyTm9ZV3hoYTJsekxtNWxkREFOQmdrcWhraUc5dzBCCkFRc0ZBQU9DQVFFQWhJRms5WEVqTENERTdQK3NlUXFVYWFkZGM3YnI3STJoUVNicU50eEliNTMwRzFRRXV3RFoKeEY2dkRPV2NTbmlQL1pWVk4vZWhqV1VXUnJOajlxcFhwSHk0TlVGb0hUVFRZdy9JZ3dyWWUra2l3YXFSQnFVNQo0L0JZcWFmMEJDN3ZQV3ZWNHQyS2RLZkgySmQ4enloNUZ4Z1ErT3VjdWUrRjFXdFRsd2FSdnlXRDVkYkw1QndaCk9oWjEyM09iTWVrK3ZtcCtMMlRtL3Z0dkdhMlpnNHRzbnJ4ZkhoRmZ4aGNkNENCUjd3TGdWZkFteTFkL1Bab0MKTU9LT084bUdGYmx3R2VxU2k2dkRNNmdYcVdnWUkrUXQzTkdIQjlGdy9iR0JRcTBBWDV6N3MwaE04UVEyZFdpbgpHcm16blNzbUkvQ01DZCtKVmRiMVRSTnJlYkplT0tmeVh3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBelFXWVk4bktGMUQwYmtwemFMUDhQTzl5WXQ4SE50NWNqSmt3WjAzNmQ2bU9wNWNPCjMxZk1Bbk9ZdnBCcXE0bHZwY1NDbmRXb2REcy9JQk84ejZKN2MyL1o1dlpRYnRFK25aMG1UNSs5VTNtNU5DY3cKMnUxUi8zQlgvVFNuSVptbktEWEV4aG9oVnZTbm9NalhKWnI1WXZUSU5GTXE3cm1rWHU5TFdkVXQvMCtPTWwycQpqKy9UalN3TWtsNExJZFFUN1BEby9yM2p4QTg3VFdaZUczaW9BcTNKVG5GMk1ndzY4T08zSXhvanBwUXJpN05RClE1RGFHUnNmLytUZURURGdXcXpVYVphNzdUeFg5UXZkYlRxSWVCOUJRbzBhcHZoMVh0dmJLeWE1bWlLQSsrcXUKWnE1dElIWXg0U002WjVoTGIyVXNEeUlLMGl5eEVPZmkxbmpHVHdJREFRQUJBb0lCQUFvOHk4bTcwMGdMeGxEVgpqZUsrRGd2YTV3clIyVEhmczU1ZnJkK1NzTDJWN1dZbjhGbXRzQ1cxTVB6ZkNEeU5qZElvdUY3NlFzR2ZEYjFqCnp1dE5VVDNINllrVFpwdkovZ2J2eUhCMGFRZElqanR3ODRzVEM2T21ML2FZVVBvb0NvVkMvaExvVGg3aDg1YmYKUUlNRHRJMUE3TmhVQ05KSDJkSFZ3Qno1dktUQmRNY05EcnRYOXZFYXZ5MWdZVFNUWmZ3WWliU2V2aEZwZjJ6SAo5Ykt2S2JrWTdyeFJlYXVmdVFnTDdpYXBIWlpPZXpqTW5mVTJZNnk5OXJvbXQ2L2hLd3VBaTBEOTVQR3lEUG9DCmxrRk0vbzZtTG94aGc5YjVxZG1zNUpTOHRCVnhIZkRRUkFsTFpqbDhzNCtvZEhWUWU0UndyUkkyY0JxKzdjMVkKSmorL0I5RUNnWUVBMVFNa2M4MGU0YVZTaDRyZjJMZHU4RGdRQkZiTzdwaGZUYkFUL2J5dlJyL2tRbm1ON2QyMQpZWXhuTDVGUXo1bnA5WjFXeVZMcWFtM2RCR0IwQ09YdlhCMXVudG9DN1JUMXZCamFNVGNLZEVKSTdHNXpsVUJLCkYvdnZrQ016L01BRklnUzIrdDZjU3RZRkorSjUwYm9aSFVBR0Z5RmRBbWh0QWRPWWJrdG9FVEVDZ1lFQTltV2sKeXo2c24vN3pnaUFOVHRyVzFyRWZMWTFEQ2FkNk10TCt0cTduRXhkUnovUnY2YmNTSnpVOWJHclk2bFMxQ3dCVAp5TncwbjdDL0w1bmFEN3ordDA3K1pRRE00VXl0MFJiY0hDb0xBcGtNNFRRQWVKS1JDd1o2WDZKRTVBaGU1Vk82CnA5N3ltMUZlMk9yOGVrSUVRa0dwVzZmQlZOTytuK3l6V0R1a2IzOENnWUJBclVxVktyUDB1WmpjZE90UXh5bVYKSU1Da1FLTm1TTGV2UkFaZDVidW1sTDgrKzk5L1dQRW81Rk8wV3NBWnVOY1Q3NmtaU2ViSldBQml3dEtZblJCWApmTXhJeVZOWUh5UVo3OFhZYWFqdjhleG9kWVQ4elY5eDl0b2Zmc0RiUG9hUWRMUUdhaTgwZmRWazdkd2xOUWRKCkhWWjhFWEpITitQWlNTRWdaQjcrRVFLQmdRQ2krRm5HUUg4SEdDZFJzd2Q2VjQ1djFCa3VGTmY1UTdlMGRCQWIKSHBZaDczT2lXeWZHYXRycjZlL2xqTXBLTzVxL1d3a1B1bTVvRFF4M1hJaDVqbVRmTTdWWmN1MFFPNXBmeUlIdgpjdk56VlczS2FvM0JNaGdUTmNhdENIUU9hMmJ3d2ErY3B2N0tNa2pNcXFneDZRWk9HSVgrNUhjZ055bEhOOVRyCmtBOVQyd0tCZ0JYbE5xcGVPM0JGL2psUXE0cENrU0NuZi9aQzJNSmI1b21ESFl2R2ZxRDlwWjA3eWY0REszWGgKRzNac3V0NXUwdGhFWXJadE52a2RObTRoUThiY1pEUmcvU21sK1plb3prRFFvYzh1cXdWU25PbUtndUprQTJUTAorTGkzNU1HeCtMSHJFQnNPVTNMbjhtY1FBbk9XV3JNSldoaFhpVkZSb1ZISE1Od21nOUpMCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVGJWcmJ1M1hJZ0wrTVUxcHNvYlA3REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NalV3TlRJMk1EZ3lNREl5V2hjTk1qWXdOVEkyTURneQpNREl5V2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ3VNWGhzSStBS01TNUV0dXFhVUs4dExyV2kvWG1keTg4bXdPdlpvSkRFTmxwNDVCWHMKb1NYMHJyTkJRT1J0dEt4KzBHVlgzUSs1enZZZFhwelhYUzFOZUw2QnZYQ0I2ekdyU1BBSGc5MEgxcHptdXVWZQpZNmVOMFBKVk9DeEoxSGZnaUJPVGJDRE01ZHNEUis0TDJsZlFJSUVIazNidDdUaGlIY1hqWUpkRjltRTlaNnR4CllKdXpqOXBXcnBJQ1ZkTS9RaFkyUHVoczdEVEtKR1VSMlZwc3E4Q3hEdndMVXptVEQrWnFlUmd5NFJpQThQYnQKRWxQN0VhTEM5RnFLMmR2VkE4WWd6bWFOS1F0QTFwTEFYb0FhUXJ5ZTBwdWNmbjR1NmRYd3lveGJxd01MaklSZQpLRysxWHBwek4xbklVTlFvMDlHUXgyVFR4M3pubkY2RFVpT2RBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV0YXBnOEZROXBwalJmaDlIYjgrbmNrZ1I4UzR3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFGdXRUSUo1K3lhdmxTMUhjVVZPa21oTm5HVHFWZ0ZNd3hWamtnMVFMbERNcU4zZnM0L09CbzB0CkpuUTcwNmdpZFdRa25NY25qRHBaajlBUjFGckVCMVJscU10NHJPSFBwRlpVek4zanVMQjc4Z1ZRaW9sc3dqclEKaFBVZGQ5aVRyREpRcE1mYmU1UG9SWU1jU210U1lJNjk1ck9PRjU4MHZSQ25PWWxJaWNIMzZFN2g0ZXpNSUE0Swp2MlZBc3NQWC8rbzZGL1FyM1p5ZEpNRU1oeEwzTjVXdkdzeFlhY1V3UFp1R2gxS1JKc2FZSnlwTmY3VDlQNUE2CjdCTnVlZ0tuTjRWZjJwNGtPRk1MYlNTclJHbXlaYkpvYld5L3hTL2FBNzJ4emRjOVZNNVlNa2xhVjlRdXdPLzIKZ09VeDhDczBMd2hpUGxMelZCMi9XekZVMFRqY2Jvcz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "S0RLb3NIVGd3WUxZNEhvRA=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "b0dhZ2ViYU4wUG5EdGhJMw=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registry-htpasswd"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJFhGaHZqVzdqeUFCbXFpaVdQRzJBSmUyaUNYbWxiQWtwendoSFhDNFdBNlNhdjBrVVlvYWtX"
---
# Source: harbor/templates/registry/registryctl-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registryctl"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-trivy
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9oYXJib3ItcmVkaXM6NjM3OS81P2lkbGVfdGltZW91dF9zZWNvbmRzPTMw
  gitHubToken: ""
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: "https://core.harbor.domain"
  CORE_URL: "http://harbor-core:80"
  JOBSERVICE_URL: "http://harbor-jobservice"
  REGISTRY_URL: "http://harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://harbor-redis:6379/2?idle_timeout_seconds=30"
  PORTAL_URL: "http://harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
  QUOTA_UPDATE_PROVIDER: "db"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice-env"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://harbor-core:80"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  REGISTRY_URL: "http://harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"

  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
---
# Source: harbor/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/registry/registryctl-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-registryctl"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-trivy"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-trivy
      protocol: TCP
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: c8548a620a464d3c00e1a2e878d013f2f9f974c21f7f8a290777e45f948f2d72
        checksum/secret: 4ee886899387850318d288fb187289545805714b2fecd7482dce7f9acc9857e7
        checksum/secret-jobservice: c68d34ad4cf28640618c354a9384fd2b927fc91dfdcb1782a3bd4741e9a95b86
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: core
        image: goharbor/harbor-core:v2.10.1
        imagePullPolicy: IfNotPresent
        startupProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 360
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-core"
        - secretRef:
            name: "harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-jobservice
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-core
      - name: ca-download
        secret:
          secretName: "harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: cc0e1292cee3c8425c958aeee30046a701a7b3e32ce7b5d3751cceebea93e2f3
        checksum/configmap-env: 52de7676d9ac66bda6ec9e57e3274d89d9b22ddea971c927ebb81964b680f5df
        checksum/secret: f4c9f22f767cb9a33011c16a594966368653fb7734081c6a85528ce6fcfe133b
        checksum/secret-core: faa3069d706839252709640bf198634238330dcd41242ddf2468908a70406b7a
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "harbor-jobservice-env"
        - secretRef:
            name: "harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath:
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: harbor-jobservice
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: portal
      annotations:
        checksum/configmap: 81e3c496ae5701420a27d38fd5d8a908c1ba48909fbc7d774e6325c925e5b224
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 1dd422c1f80f9b0e00e1a2297e956c1da3fb1d6bc24892179accf38bc1e3be96
        checksum/secret: 32aef8649a164097e39cf29204cd8ee78e84dc6dd6c7f3b02be9c64ad0e72e50
        checksum/secret-jobservice: b2392754e9a0ddf5a734deb89df29444f8fc351258becb1369393094f2966737
        checksum/secret-core: e8c24d6b26ddef41b37bbfb6724380a18f7b2983c127e7d93712834872e7b320
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath:
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-registryctl"
        - secretRef:
            name: "harbor-registry"
        - secretRef:
            name: "harbor-registryctl"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath:
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: harbor-registry-htpasswd

          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-config
        configMap:
          name: "harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-database"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 55b1e7be0855a53d12362dc11834f575bd16ba09cdd84b0551bda85635e15ac1
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      initContainers:
      # as we change the data directory to a sub folder to support psp, the init container here
      # is used to migrate the existing data. See https://github.com/goharbor/harbor-helm/issues/756
      # for more detail.
      # we may remove it after several releases
      - name: "data-migrator"
        image: goharbor/harbor-db:v2.10.1
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath:
      # with "fsGroup" set, each time a volume is mounted, Kubernetes must recursively chown() and chmod() all the files and directories inside the volume
      # this causes the postgresql reports the "data directory /var/lib/postgresql/data/pgdata has group or world access" issue when using some CSIs e.g. Ceph
      # use this init container to correct the permission
      # as "fsGroup" applied before the init container running, the container has enough permission to execute the command
      - name: "data-permissions-ensurer"
        image: goharbor/harbor-db:v2.10.1
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath:
      containers:
      - name: database
        image: goharbor/harbor-db:v2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 1
        envFrom:
          - secretRef:
              name: "harbor-database"
        env:
          # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
          # more detail refer to https://github.com/goharbor/harbor-helm/issues/756
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath:
        - name: shm-volume
          mountPath: /dev/shm
      volumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
          sizeLimit: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-redis
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: redis
        image: goharbor/redis-photon:v2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath:
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-trivy
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: harbor-trivy
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: 81105cb33a8cb2937d69d3a39d46a94953951b6154c8518d288852bcf66b4d6d
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.10.1
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_TIMEOUT"
              value: "5m0s"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_JAVA_DB_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_OFFLINE_SCAN"
              value: "false"
            - name: "SCANNER_TRIVY_SECURITY_CHECKS"
              value: "vuln"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath:
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "harbor-ingress"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - secretName: harbor-ingress
    hosts:
    - harbor.trochalakis.net
  rules:
  - http:
      paths:
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /service/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /v2/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /chartrepo/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /c/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: harbor-portal
            port:
              number: 80
    host: harbor.trochalakis.net
